// import { useParams } from "react-router-dom";

import { Suspense } from "react";

import {
    // useLoaderData,
    useRouteLoaderData,
    json,
    redirect,
    defer,
    Await,
} from "react-router-dom";
import EventItem from "../components/EventItem";
import EventsList from "../components/EventsList";

function EventDetailPage() {
    // const params = useParams();
    // const data = useLoaderData();
    const { event, events } = useRouteLoaderData("event-detail");
    return (
        <>
            <Suspense
                fallback={<p style={{ textAlign: "center" }}>Loading...</p>}
            >
                <Await resolve={event}>
                    {(loadedEvent) => <EventItem event={loadedEvent} />}

                    {/* <h1>EventDetailPage</h1>
            <p>Event ID: {params.eventId}</p> */}
                </Await>
            </Suspense>
            <Suspense
                fallback={<p style={{ textAlign: "center" }}>Loading...</p>}
            >
                <Await resolve={events}>
                    {(loadedEvents) => <EventsList events={loadedEvents} />}
                </Await>
            </Suspense>
        </>
    );
}

export default EventDetailPage;

async function loadEvent(id) {
    const response = await fetch("http://localhost:8080/events/" + id);

    if (!response.ok)
        throw json(
            { message: "Could not fetch details for selected event." },
            { status: 500 }
        );
    else {
        const resData = await response.json();
        return resData.event; // we can return whatever, even a response object(and react would automatically extract the data from the response)
    }
}

async function loadEvents() {
    // loader is performed in browser, not in backend, but we can't use reactHooks in the loader function(the only limitation)
    const response = await fetch("http://localhost:8080/events"); // fetch returns promise, which would be resolved in respone object
    if (!response.ok) {
        // incorrect response
        // return { isError: true, message: "Could not fetch events" };
        // throw { message: "Could not fetch events" };
        // throw new Response(
        //     JSON.stringify(
        //         { message: "Could not fetch events." },
        //         { status: 500 }
        //     )
        // );
        throw json({ message: "Could not fetch events." }, { status: 500 });
    } else {
        const resData = await response.json();
        return resData.events; // we can return whatever, even a response object(and react would automatically extract the data from the response)
    }
}

export async function loader({ request, params }) {
    // we can get the values alike using useParams
    const id = params.eventId;

    return defer({
        event: await loadEvent(id), // make sure the detail to be loaded before entering the page
        events: loadEvents(),
    });
}

export async function action({ params, request }) {
    // action's parameter is passed to request(generated by react router)
    const eventId = params.eventId;
    const response = await fetch("http://localhost:8080/events/" + eventId, {
        method: request.method,
    });
    if (!response.ok)
        throw json({ message: "Could not delete event." }, { status: 500 });
    return redirect("/events");
}
